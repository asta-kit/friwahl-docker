<?php 
namespace AstaKit\FriWahl\VoterDirectory\Domain\Model;

/*                                                                                 *
 * This script belongs to the TYPO3 Flow package "AstaKit.FriWahl.VoterDirectory". *
 *                                                                                 *
 *                                                                                 */


/**
 * Parser for a line from a file to import.
 *
 * @author Andreas Wolf <andreas.wolf@usta.de>
 */
class ImportFileLineParser_Original {

	/**
	 * Information on a line in the import file.
	 *
	 * @var array
	 */
	protected $formatInformation;

	/**
	 * The separator between fields, often used values are: , ; [TAB] [SPACE]
	 *
	 * @var string
	 */
	protected $fieldSeparator;

	/**
	 * The character used for wrapping a field's contents, e.g. " or '.
	 *
	 * @var string
	 */
	protected $fieldContentWrap;

	/**
	 * @param ImportFileFormat $formatInformation
	 */
	public function __construct(ImportFileFormat $formatInformation) {
		$this->formatInformation = $formatInformation;
	}

	/**
	 * Parses the given line from a file to import and returns the data correctly processed and mapped to the right
	 * fields.
	 *
	 * @param string $line
	 * @return array
	 * @throws \UnexpectedValueException
	 */
	public function parseLine($line) {
		$fields = str_getcsv($line, $this->formatInformation->getFieldSeparator(), $this->formatInformation->getFieldWrap());

		// TODO check if read line has correct number of fields

		$mappedLine = array(
			'properties' => array(),
			'discriminators' => array(),
		);

		foreach ($fields as $index => $fieldValue) {
			if (!$this->formatInformation->hasFieldWithIndex($index)) {
				// TODO write a test for undefined fields
				continue;
			}

			$fieldConfiguration = $this->formatInformation->getFieldConfiguration($index);

			if (isset($fieldConfiguration['skip']) && $fieldConfiguration['skip'] === TRUE) {
				// TODO write a test for this
				continue;
			}

			$fieldValue = $this->preProcessFieldValue($fieldConfiguration, $fieldValue);

			switch ($fieldConfiguration['type']) {
				case 'property':
					$mappedLine['properties'][$fieldConfiguration['name']] = $fieldValue;

					break;

				case 'discriminator':
					if (isset($fieldConfiguration['valueMap'])) {
						if (!isset($fieldConfiguration['valueMap'][$fieldValue])) {
							throw new \UnexpectedValueException(
								sprintf('Value %s not found in valueMap for field %s', $fieldValue, $fieldConfiguration['name']),
								1401456122
							);
						} else {
							$fieldValue = $fieldConfiguration['valueMap'][$fieldValue];
						}
					}

					$mappedLine['discriminators'][$fieldConfiguration['name']] = $fieldValue;

					break;
			}
		}

		return $mappedLine;
	}

	/**
	 * Does pre-processing for a field value, as configured in the key "preProcessing" in the field configuration.
	 * The key must be an array of processing instructions that will be handled in the exact order they are given.
	 *
	 * @param array $fieldConfiguration
	 * @param string $fieldValue
	 * @return string
	 *
	 * @throws \UnexpectedValueException If the preprocessing configuration is invalid
	 */
	protected function preProcessFieldValue($fieldConfiguration, $fieldValue) {
		if (!isset($fieldConfiguration['preProcessing'])) {
			return $fieldValue;
		}

		if (!is_array($fieldConfiguration['preProcessing'])) {
			throw new \UnexpectedValueException('pre-processing configuration must be an array');
		}

		// process the field values in the order they are specified, as this order might be significant (currently it
		// shouldn't be, but you never know…)
		foreach ($fieldConfiguration['preProcessing'] as $processor) {
			switch ($processor) {
				case 'trim':
					$fieldValue = trim($fieldValue);

					break;
			}
		}

		return $fieldValue;
	}
}
namespace AstaKit\FriWahl\VoterDirectory\Domain\Model;

use Doctrine\ORM\Mapping as ORM;
use TYPO3\Flow\Annotations as Flow;

/**
 * Parser for a line from a file to import.
 */
class ImportFileLineParser extends ImportFileLineParser_Original implements \TYPO3\Flow\Object\Proxy\ProxyInterface {


	/**
	 * Autogenerated Proxy Method
	 * @param ImportFileFormat $formatInformation
	 */
	public function __construct() {
		$arguments = func_get_args();

		if (!array_key_exists(0, $arguments)) $arguments[0] = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('AstaKit\FriWahl\VoterDirectory\Domain\Model\ImportFileFormat');
		if (!array_key_exists(0, $arguments)) throw new \TYPO3\Flow\Object\Exception\UnresolvedDependenciesException('Missing required constructor argument $formatInformation in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
		call_user_func_array('parent::__construct', $arguments);
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __wakeup() {

	if (property_exists($this, 'Flow_Persistence_RelatedEntities') && is_array($this->Flow_Persistence_RelatedEntities)) {
		$persistenceManager = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface');
		foreach ($this->Flow_Persistence_RelatedEntities as $entityInformation) {
			$entity = $persistenceManager->getObjectByIdentifier($entityInformation['identifier'], $entityInformation['entityType'], TRUE);
			if (isset($entityInformation['entityPath'])) {
				$this->$entityInformation['propertyName'] = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$entityInformation['propertyName'], $entityInformation['entityPath'], $entity);
			} else {
				$this->$entityInformation['propertyName'] = $entity;
			}
		}
		unset($this->Flow_Persistence_RelatedEntities);
	}
			}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __sleep() {
		$result = NULL;
		$this->Flow_Object_PropertiesToSerialize = array();
	$reflectionService = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Reflection\ReflectionService');
	$reflectedClass = new \ReflectionClass('AstaKit\FriWahl\VoterDirectory\Domain\Model\ImportFileLineParser');
	$allReflectedProperties = $reflectedClass->getProperties();
	foreach ($allReflectedProperties as $reflectionProperty) {
		$propertyName = $reflectionProperty->name;
		if (in_array($propertyName, array('Flow_Aop_Proxy_targetMethodsAndGroupedAdvices', 'Flow_Aop_Proxy_groupedAdviceChains', 'Flow_Aop_Proxy_methodIsInAdviceMode'))) continue;
		if (isset($this->Flow_Injected_Properties) && is_array($this->Flow_Injected_Properties) && in_array($propertyName, $this->Flow_Injected_Properties)) continue;
		if ($reflectionProperty->isStatic() || $reflectionService->isPropertyAnnotatedWith('AstaKit\FriWahl\VoterDirectory\Domain\Model\ImportFileLineParser', $propertyName, 'TYPO3\Flow\Annotations\Transient')) continue;
		if (is_array($this->$propertyName) || (is_object($this->$propertyName) && ($this->$propertyName instanceof \ArrayObject || $this->$propertyName instanceof \SplObjectStorage ||$this->$propertyName instanceof \Doctrine\Common\Collections\Collection))) {
			if (count($this->$propertyName) > 0) {
				foreach ($this->$propertyName as $key => $value) {
					$this->searchForEntitiesAndStoreIdentifierArray((string)$key, $value, $propertyName);
				}
			}
		}
		if (is_object($this->$propertyName) && !$this->$propertyName instanceof \Doctrine\Common\Collections\Collection) {
			if ($this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($this->$propertyName);
			} else {
				$varTagValues = $reflectionService->getPropertyTagValues('AstaKit\FriWahl\VoterDirectory\Domain\Model\ImportFileLineParser', $propertyName, 'var');
				if (count($varTagValues) > 0) {
					$className = trim($varTagValues[0], '\\');
				}
				if (\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->isRegistered($className) === FALSE) {
					$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($this->$propertyName));
				}
			}
			if ($this->$propertyName instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($this->$propertyName) || $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
					$this->Flow_Persistence_RelatedEntities = array();
					$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
				}
				$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($this->$propertyName);
				if (!$identifier && $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
					$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($this->$propertyName, '_identifier', TRUE));
				}
				$this->Flow_Persistence_RelatedEntities[$propertyName] = array(
					'propertyName' => $propertyName,
					'entityType' => $className,
					'identifier' => $identifier
				);
				continue;
			}
			if ($className !== FALSE && (\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getScope($className) === \TYPO3\Flow\Object\Configuration\Configuration::SCOPE_SINGLETON || $className === 'TYPO3\Flow\Object\DependencyInjection\DependencyProxy')) {
				continue;
			}
		}
		$this->Flow_Object_PropertiesToSerialize[] = $propertyName;
	}
	$result = $this->Flow_Object_PropertiesToSerialize;
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function searchForEntitiesAndStoreIdentifierArray($path, $propertyValue, $originalPropertyName) {

		if (is_array($propertyValue) || (is_object($propertyValue) && ($propertyValue instanceof \ArrayObject || $propertyValue instanceof \SplObjectStorage))) {
			foreach ($propertyValue as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray($path . '.' . $key, $value, $originalPropertyName);
			}
		} elseif ($propertyValue instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($propertyValue) || $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
			if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
				$this->Flow_Persistence_RelatedEntities = array();
				$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
			}
			if ($propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($propertyValue);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($propertyValue));
			}
			$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($propertyValue);
			if (!$identifier && $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($propertyValue, '_identifier', TRUE));
			}
			$this->Flow_Persistence_RelatedEntities[$originalPropertyName . '.' . $path] = array(
				'propertyName' => $originalPropertyName,
				'entityType' => $className,
				'identifier' => $identifier,
				'entityPath' => $path
			);
			$this->$originalPropertyName = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$originalPropertyName, $path, NULL);
		}
			}
}
#