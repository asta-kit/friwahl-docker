<?php 
namespace AstaKit\FriWahl\VoterDirectory\Domain\Model;

/*                                                                                 *
 * This script belongs to the TYPO3 Flow package "AstaKit.FriWahl.VoterDirectory". *
 *                                                                                 *
 *                                                                                 */


/**
 * Format description for a file to import voters from.
 *
 * Each format description can contain an arbitrary number of fields, which can be mapped to either a property or a
 * discriminator in the target voter object.
 *
 * The fields defined for the format are indexed numerically. A possible extension would be to index them by name and
 * make it possible to arbitrarily map the fields in the import file by supplying the field order in the first line (as
 * is usually done for CSV files).
 *
 * @author Andreas Wolf <andreas.wolf@usta.de>
 */
class ImportFileFormat_Original {

	/**
	 * @var string
	 */
	protected $name;

	/**
	 * The character used to separate fields in a line. This must be exactly one single character, mainly because
	 * the method str_getcsv() we use for reading a line does not support multiple character separators.
	 *
	 * @var string
	 */
	protected $fieldSeparator;

	/**
	 * The character used to wrap a fields' contents.
	 *
	 * @var string
	 */
	protected $fieldWrap;

	/**
	 * Field definitions.
	 *
	 * @var array
	 */
	protected $fields;

	/**
	 * Constructor method to create an object from a configuration entry defining a file format
	 *
	 * @param string $formatName
	 * @param array $importConfiguration
	 * @return self
	 *
	 * @throws \InvalidArgumentException If the configuration is invalid
	 */
	public static function createFromConfiguration($formatName, $importConfiguration) {
		$fileFormat = new ImportFileFormat();

		if (!isset($importConfiguration['fieldSeparator']) || !isset($importConfiguration['fieldWrap'])) {
			throw new \InvalidArgumentException('Field separator or field wrap not defined for format ' . $formatName, 1401554952);
		}
		if (strlen($importConfiguration['fieldSeparator']) != 1) {
			throw new \InvalidArgumentException('Field separator must be exactly one character in format ' . $formatName, 1401554953);
		}
		if (strlen($importConfiguration['fieldWrap']) != 1) {
			throw new \InvalidArgumentException('Field wrap must be exactly one character in format ' . $formatName, 1401554954);
		}
		if (!isset($importConfiguration['fields']) || count($importConfiguration['fields']) == 0) {
			throw new \InvalidArgumentException('No fields defined for format ' . $formatName, 1401554955);
		}

		$fileFormat->fields = $importConfiguration['fields'];
		$fileFormat->fieldSeparator = $importConfiguration['fieldSeparator'];
		$fileFormat->fieldWrap = $importConfiguration['fieldWrap'];

		return $fileFormat;
	}

	/**
	 * Use createFromConfiguration().
	 */
	protected function __construct() {
	}

	/**
	 * @return string
	 */
	public function getFieldSeparator() {
		return $this->fieldSeparator;
	}

	/**
	 * @return string
	 */
	public function getFieldWrap() {
		return $this->fieldWrap;
	}

	/**
	 * @return string
	 */
	public function getName() {
		return $this->name;
	}

	/**
	 * Returns the number of defined fields in the input file.
	 *
	 * @return int
	 */
	public function getInputFieldCount() {
		return count($this->fields);
	}

	/**
	 * Returns TRUE if this format maps one of the input fields to the given property
	 *
	 * @param string $property The property to check
	 * @return bool
	 */
	public function hasMappingForProperty($property) {
		foreach ($this->fields as $field) {
			if ($field['type'] == 'property' && $field['name'] == $property) {
				//
			}
		}
		return FALSE;
	}

	/**
	 * Returns the configuration for the given field index
	 *
	 * @param int $index
	 * @return array
	 */
	public function getFieldConfiguration($index) {
		return $this->fields[$index];
	}

	public function hasFieldWithIndex($index) {
		return isset($this->fields[$index]);
	}

}
namespace AstaKit\FriWahl\VoterDirectory\Domain\Model;

use Doctrine\ORM\Mapping as ORM;
use TYPO3\Flow\Annotations as Flow;

/**
 * Format description for a file to import voters from.
 * 
 * Each format description can contain an arbitrary number of fields, which can be mapped to either a property or a
 * discriminator in the target voter object.
 * 
 * The fields defined for the format are indexed numerically. A possible extension would be to index them by name and
 * make it possible to arbitrarily map the fields in the import file by supplying the field order in the first line (as
 * is usually done for CSV files).
 */
class ImportFileFormat extends ImportFileFormat_Original implements \TYPO3\Flow\Object\Proxy\ProxyInterface {


	/**
	 * Autogenerated Proxy Method
	 */
	 public function __wakeup() {

	if (property_exists($this, 'Flow_Persistence_RelatedEntities') && is_array($this->Flow_Persistence_RelatedEntities)) {
		$persistenceManager = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface');
		foreach ($this->Flow_Persistence_RelatedEntities as $entityInformation) {
			$entity = $persistenceManager->getObjectByIdentifier($entityInformation['identifier'], $entityInformation['entityType'], TRUE);
			if (isset($entityInformation['entityPath'])) {
				$this->$entityInformation['propertyName'] = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$entityInformation['propertyName'], $entityInformation['entityPath'], $entity);
			} else {
				$this->$entityInformation['propertyName'] = $entity;
			}
		}
		unset($this->Flow_Persistence_RelatedEntities);
	}
			}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __sleep() {
		$result = NULL;
		$this->Flow_Object_PropertiesToSerialize = array();
	$reflectionService = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Reflection\ReflectionService');
	$reflectedClass = new \ReflectionClass('AstaKit\FriWahl\VoterDirectory\Domain\Model\ImportFileFormat');
	$allReflectedProperties = $reflectedClass->getProperties();
	foreach ($allReflectedProperties as $reflectionProperty) {
		$propertyName = $reflectionProperty->name;
		if (in_array($propertyName, array('Flow_Aop_Proxy_targetMethodsAndGroupedAdvices', 'Flow_Aop_Proxy_groupedAdviceChains', 'Flow_Aop_Proxy_methodIsInAdviceMode'))) continue;
		if (isset($this->Flow_Injected_Properties) && is_array($this->Flow_Injected_Properties) && in_array($propertyName, $this->Flow_Injected_Properties)) continue;
		if ($reflectionProperty->isStatic() || $reflectionService->isPropertyAnnotatedWith('AstaKit\FriWahl\VoterDirectory\Domain\Model\ImportFileFormat', $propertyName, 'TYPO3\Flow\Annotations\Transient')) continue;
		if (is_array($this->$propertyName) || (is_object($this->$propertyName) && ($this->$propertyName instanceof \ArrayObject || $this->$propertyName instanceof \SplObjectStorage ||$this->$propertyName instanceof \Doctrine\Common\Collections\Collection))) {
			if (count($this->$propertyName) > 0) {
				foreach ($this->$propertyName as $key => $value) {
					$this->searchForEntitiesAndStoreIdentifierArray((string)$key, $value, $propertyName);
				}
			}
		}
		if (is_object($this->$propertyName) && !$this->$propertyName instanceof \Doctrine\Common\Collections\Collection) {
			if ($this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($this->$propertyName);
			} else {
				$varTagValues = $reflectionService->getPropertyTagValues('AstaKit\FriWahl\VoterDirectory\Domain\Model\ImportFileFormat', $propertyName, 'var');
				if (count($varTagValues) > 0) {
					$className = trim($varTagValues[0], '\\');
				}
				if (\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->isRegistered($className) === FALSE) {
					$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($this->$propertyName));
				}
			}
			if ($this->$propertyName instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($this->$propertyName) || $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
					$this->Flow_Persistence_RelatedEntities = array();
					$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
				}
				$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($this->$propertyName);
				if (!$identifier && $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
					$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($this->$propertyName, '_identifier', TRUE));
				}
				$this->Flow_Persistence_RelatedEntities[$propertyName] = array(
					'propertyName' => $propertyName,
					'entityType' => $className,
					'identifier' => $identifier
				);
				continue;
			}
			if ($className !== FALSE && (\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getScope($className) === \TYPO3\Flow\Object\Configuration\Configuration::SCOPE_SINGLETON || $className === 'TYPO3\Flow\Object\DependencyInjection\DependencyProxy')) {
				continue;
			}
		}
		$this->Flow_Object_PropertiesToSerialize[] = $propertyName;
	}
	$result = $this->Flow_Object_PropertiesToSerialize;
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function searchForEntitiesAndStoreIdentifierArray($path, $propertyValue, $originalPropertyName) {

		if (is_array($propertyValue) || (is_object($propertyValue) && ($propertyValue instanceof \ArrayObject || $propertyValue instanceof \SplObjectStorage))) {
			foreach ($propertyValue as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray($path . '.' . $key, $value, $originalPropertyName);
			}
		} elseif ($propertyValue instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($propertyValue) || $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
			if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
				$this->Flow_Persistence_RelatedEntities = array();
				$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
			}
			if ($propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($propertyValue);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($propertyValue));
			}
			$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($propertyValue);
			if (!$identifier && $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($propertyValue, '_identifier', TRUE));
			}
			$this->Flow_Persistence_RelatedEntities[$originalPropertyName . '.' . $path] = array(
				'propertyName' => $originalPropertyName,
				'entityType' => $className,
				'identifier' => $identifier,
				'entityPath' => $path
			);
			$this->$originalPropertyName = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$originalPropertyName, $path, NULL);
		}
			}
}
#